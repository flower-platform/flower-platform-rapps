#include <Arduino.h>
#include <HardwareSerial.h>
#include <stdbool.h>

#include <DHTSensor.h>
#include <Output.h>
#include <HttpServer.h>
#include <WiFi101NetworkAdapter.h>
#include <Timer.h>


class AppGen {
public: 
	
	DHTSensor sensor;
	Output relay;
	HttpServer httpServer;
	WiFi101NetworkAdapter networkAdapter;
	Timer timer;

	int currentTemperature;
	int presetTemperature;

	void setDesiredTemperature(int temperature) {
        presetTemperature = temperature;

	}

	void sensor_onTemperatureChanged(ValueChangedEvent* event) {
        Serial.println(event->currentValue);
        currentTemperature = event->currentValue;

	}
	void timer_onTimer(TimerEvent* event) {
        if ( (currentTemperature >= presetTemperature) ) {
            relay.setValue(HIGH);
        } else {
            relay.setValue(LOW);
        }

	}

	void httpServer_onCommandReceived(HttpCommandEvent* event) {
		char command[32];
		event->server->getCommandFromUrl(event->url, command);
		bool urlFound = false;
		
		BufferedPrint out(event->client);
		if (strcmp_P(command, PSTR("")) == 0) {
			event->server->httpSuccess(&out, HttpServer::CONTENT_TYPE_HTML, true);
			static const uint8_t HTML_PAGE[] PROGMEM = {
				31,139,8,0,0,0,0,0,0,0,205,88,235,115,219,184,17,255,156,255,2,198,36,103,178,18,41,203,78,51,23,73,84,206,245,165,253,114,55,201,36,185,233,180,62,207,13,72,130,34,36,240,81,2,180,173,211,232,127,191,93,240,45,203,142,211,206,180,245,140,37,60,22,251,222,197,15,90,156,252,248,225,234,203,63,62,190,39,177,78,228,146,44,240,139,164,43,135,229,185,71,75,65,113,137,179,16,190,84,80,136,92,19,85,4,30,141,181,206,213,108,50,97,107,118,239,174,178,108,37,57,203,133,114,131,44,49,107,19,41,124,53,97,233,170,148,
				172,88,171,201,212,125,237,254,185,153,187,137,72,221,181,162,203,197,164,226,249,8,243,32,76,215,192,82,102,101,24,193,49,126,156,187,83,10,199,207,50,173,116,193,114,16,52,117,207,39,253,37,71,231,82,61,71,36,74,204,66,238,174,255,85,242,98,107,132,85,67,7,152,2,215,231,170,157,176,123,208,220,109,21,192,9,50,235,148,188,112,47,220,215,19,112,75,187,116,140,183,20,233,134,20,92,122,84,233,173,228,42,230,92,83,18,23,60,250,118,89,129,58,20,6,43,244,25,66,64,134,57,119,199,116,16,27,214,57,203,121,241,4,51,
				115,246,180,62,27,101,169,86,135,9,2,212,239,34,150,8,185,245,62,101,126,166,179,83,163,193,105,167,193,41,209,219,156,123,167,154,223,107,36,63,69,87,227,238,210,141,179,66,252,190,252,211,46,20,42,151,108,59,19,41,72,229,142,47,179,96,51,191,139,133,230,142,202,89,192,103,105,118,7,234,205,19,86,172,68,58,59,219,187,183,188,208,189,131,154,249,146,31,156,40,18,38,15,78,236,240,67,4,76,58,76,138,85,58,211,89,190,175,148,56,186,19,128,193,60,213,59,52,220,81,226,119,62,59,159,230,247,115,51,189,227,98,21,
				235,217,197,217,217,220,232,28,87,115,168,141,61,132,221,152,71,22,147,186,218,252,44,220,146,64,50,165,60,90,51,165,88,151,56,46,50,41,121,225,209,79,16,132,43,93,72,218,102,226,242,150,21,164,20,94,91,105,89,88,74,110,97,33,143,175,225,179,203,20,122,99,207,97,222,177,179,58,118,64,250,82,5,89,206,233,152,190,196,72,226,183,0,29,138,91,38,113,12,206,102,90,100,41,29,71,101,26,224,200,98,227,120,204,199,43,123,135,26,248,158,181,114,21,103,69,16,91,54,200,100,69,248,75,33,79,188,50,13,121,4,166,135,239,
				142,108,207,40,181,231,120,58,244,40,157,51,87,105,166,75,229,237,246,115,17,89,254,9,44,218,187,176,205,74,58,242,71,116,66,247,204,93,113,253,151,154,133,215,170,35,236,93,193,117,89,164,36,28,137,61,112,11,88,194,229,21,83,252,75,246,5,178,234,239,66,199,159,49,234,170,59,179,169,148,95,123,27,183,224,144,35,1,183,38,214,245,165,243,207,27,123,178,26,83,242,114,90,43,40,188,181,27,196,172,184,212,214,153,237,234,236,151,28,74,2,121,91,246,104,237,42,41,224,228,20,55,126,202,238,154,141,121,173,14,40,211,
				8,36,81,95,164,0,223,220,127,136,44,250,219,111,173,24,240,3,216,190,246,60,103,106,239,132,183,217,115,169,56,14,92,85,250,16,70,145,174,172,245,232,124,188,113,37,79,87,58,182,247,181,148,39,236,5,215,236,145,123,208,25,110,239,98,244,162,53,240,165,69,97,242,25,98,192,169,109,131,188,0,206,42,171,239,224,54,68,162,141,214,165,186,44,10,182,245,174,111,32,229,11,11,229,108,136,0,171,65,253,200,18,110,204,212,135,187,244,99,1,185,85,232,45,152,111,214,55,16,220,168,224,252,103,158,208,198,33,16,246,181,43,
				153,15,141,1,221,4,19,200,189,146,123,226,122,115,115,40,206,205,75,21,91,107,123,15,127,246,126,206,173,96,60,61,59,59,179,129,78,164,183,217,134,247,98,60,94,143,69,99,239,230,136,93,178,103,151,4,110,123,168,147,7,13,255,137,50,123,80,85,127,227,41,47,68,112,149,37,121,150,66,21,255,7,21,22,142,253,113,128,250,65,23,77,88,26,42,244,115,248,72,232,126,228,149,174,89,161,142,6,144,35,163,176,35,242,120,27,178,200,59,155,71,139,193,110,43,178,206,180,121,52,26,245,53,185,142,110,48,100,245,212,59,126,22,
				136,48,159,235,169,155,179,2,146,20,108,86,246,174,94,251,216,46,121,15,169,92,104,220,66,91,116,78,49,178,61,166,61,26,244,72,19,21,48,231,61,131,22,243,128,119,231,211,24,59,150,142,225,98,50,41,180,195,107,103,22,55,130,102,212,190,158,222,184,80,103,137,101,143,83,56,61,220,59,107,247,76,110,66,3,131,132,25,63,166,154,189,31,238,32,191,214,202,250,251,192,174,42,255,27,26,51,195,12,175,90,119,40,10,14,86,220,66,222,213,20,189,100,169,202,136,97,76,24,116,51,236,21,129,246,232,123,211,88,49,241,188,157,
				97,55,163,63,208,202,50,28,116,202,154,105,85,60,51,250,29,178,165,200,73,243,4,26,163,134,171,121,17,138,91,188,143,4,0,133,246,152,169,70,218,92,91,57,75,185,36,230,211,129,190,207,74,169,233,242,69,253,183,128,232,36,13,37,142,29,115,169,66,225,64,1,16,40,30,94,45,119,39,94,52,34,161,57,115,166,123,98,177,195,12,117,32,112,197,5,27,226,111,201,75,211,87,123,92,42,54,125,193,171,34,43,115,90,27,67,58,182,46,102,3,57,241,200,175,167,112,109,2,128,73,127,61,237,51,122,177,48,46,36,192,196,163,187,93,119,14,
				253,185,223,211,238,250,150,78,18,58,23,4,7,42,113,206,205,224,94,153,129,105,20,142,97,68,151,15,153,44,38,102,107,32,181,167,127,205,250,77,195,250,77,195,250,205,64,209,23,11,145,230,165,70,19,161,85,33,218,27,186,235,186,242,210,77,213,99,105,133,190,40,162,47,58,240,84,173,46,37,34,60,110,177,185,53,227,76,134,8,79,222,99,63,35,134,37,201,34,114,140,126,50,48,108,2,150,45,159,152,31,75,185,42,72,222,48,72,71,194,123,36,110,255,63,225,33,255,86,124,130,152,7,27,63,187,167,196,128,71,48,87,102,76,207,
				136,228,145,158,67,65,132,33,224,3,7,96,233,140,156,191,34,148,124,131,175,15,167,199,75,230,48,54,181,26,119,34,212,241,236,251,183,175,58,37,80,165,25,153,78,123,75,0,252,117,150,204,46,94,13,67,227,151,176,156,54,194,124,157,18,248,175,224,189,25,201,85,99,126,69,89,129,98,128,92,27,143,86,253,234,170,106,134,150,141,1,171,123,230,98,82,81,63,215,226,197,4,205,92,30,219,251,154,47,250,89,122,114,216,25,135,46,122,59,125,224,162,183,95,241,208,127,203,63,67,147,205,228,20,250,63,190,240,58,48,21,142,131,
				177,111,16,156,255,149,203,220,127,228,26,239,93,239,45,112,252,134,235,59,26,243,135,215,119,244,196,245,29,125,253,250,62,84,9,32,160,185,149,219,103,87,7,221,90,61,192,9,45,168,15,16,89,129,75,184,215,61,119,154,199,8,72,168,31,56,239,232,188,69,90,128,186,42,196,197,107,112,229,76,43,120,21,122,225,136,55,80,97,68,61,90,205,140,182,35,250,29,221,63,69,208,60,56,194,189,239,14,2,223,199,253,205,150,101,67,8,13,147,160,31,203,202,1,8,130,27,110,108,63,128,195,131,94,7,87,55,24,91,56,145,44,69,248,224,177,
				122,20,7,15,89,20,217,29,61,100,106,26,232,107,82,15,178,40,82,92,59,175,15,200,250,72,35,135,144,178,2,16,0,220,94,78,192,241,14,58,70,237,224,59,27,170,140,46,63,27,176,95,229,248,17,58,124,136,55,12,122,224,163,122,34,32,242,24,60,69,204,83,28,14,46,225,186,171,54,26,216,70,132,234,214,76,132,176,236,42,218,70,248,83,95,255,115,63,213,233,243,141,158,34,128,168,234,10,70,103,29,123,22,224,153,134,196,128,98,128,22,7,184,24,177,66,5,134,113,239,209,167,237,0,41,219,6,144,116,61,168,199,181,91,69,26,172,
				135,166,57,162,46,147,154,236,121,113,121,78,120,154,176,124,255,48,62,38,91,26,186,10,151,152,207,14,49,15,40,86,114,155,199,2,234,138,180,35,39,100,42,54,63,162,152,159,15,77,66,253,21,94,211,36,225,73,6,1,182,62,127,186,252,217,158,117,201,87,63,181,33,37,253,173,230,234,177,36,196,112,154,31,164,240,135,225,63,0,105,34,238,237,40,22,0,0
			};
			out.write_P(HTML_PAGE, (sizeof(HTML_PAGE)/sizeof(*HTML_PAGE)));
			out.flush();
			return;
		} else if (strcmp_P(command, PSTR("setDesiredTemperature")) == 0) {
			urlFound = true;
			int temperature = event->server->getIntParameterValue(event->url, "temperature");
			setDesiredTemperature(temperature);
		} else if (strcmp_P(command, PSTR("getDescriptors")) == 0) {
			printDescriptorsAsJson(&out);
			out.flush();
			return;
		} else if (strcmp_P(command, PSTR("getState")) == 0) {
			urlFound = true;
		}
		
		if (urlFound) {
			event->server->httpSuccess(&out);
			printStateAsJson(&out);
		} else {
			event->server->httpError404(&out);
		}
		out.flush();
	}
	
	void printDescriptorsAsJson(Print* print) {
		print->print(F("{\"inputs\":["));
		print->print(F("{\"label\":\"sensor\", \"property\":\"sensor\"}"));
		print->print(F(",{\"label\":\"relay\", \"property\":\"relay\"}"));

		print->print(F("],\"commands\":["));
		print->print(F("{\"label\":\"setDesiredTemperature\", \"command\":\"setDesiredTemperature\", \"parameters\":\"temperature:int\"}"));
		
		print->print(F("]}"));

	}
	
	void printStateAsJson(Print* print) {
		print->print(F("{"));
		sensor.printStateAsJson(F("sensor"), print);
		print->print(F(","));
		relay.printStateAsJson(F("relay"), print);
		print->print(F(","));
	
		write_P(print, PSTR("\"freeMem\": "));
		print->print(freeRam());
		print->print("}");
	}

	void setup() {
		sensor.contributesToState = true;
		sensor.pin = 5;
		sensor.pollInterval = 1000;
		sensor.onTemperatureChanged = new DelegatingCallback<AppGen, ValueChangedEvent>(this, &AppGen::sensor_onTemperatureChanged); 

		relay.contributesToState = true;
		relay.pin = 7;
		relay.initialValue = 1;

		httpServer.port = 80;
		httpServer.onCommandReceived = new DelegatingCallback<AppGen, HttpCommandEvent>(this, &AppGen::httpServer_onCommandReceived); 

		networkAdapter.ssid = "wifi-work";
		networkAdapter.password = "wifi-work-pass-123";
		networkAdapter.protocolHandler = &httpServer;
		networkAdapter.ipAddressStr = "192.168.100.252";

		timer.delay = 1000;
		timer.autoStart = true;
		timer.onTimer = new DelegatingCallback<AppGen, TimerEvent>(this, &AppGen::timer_onTimer); 

		sensor.setup();
		relay.setup();
		httpServer.setup();
		networkAdapter.setup();
		timer.setup();
	}

	void loop() {
		sensor.loop();
		relay.loop();
		httpServer.loop();
		networkAdapter.loop();
		timer.loop();
	}
	
};

#include "CustomCode.h"

App app;

void setup() {
	Serial.begin(115200);
	app.setup();
}

void loop() {
	app.loop();
}
